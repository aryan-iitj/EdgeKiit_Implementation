var euclideanLength = function (vector) {
    return Math.sqrt(vector.reduce(function (acc, cur) { return acc + Math.pow(cur, 2); }, 0));
};
var cosineScaler = function (x) {
    var MAX = 0.9;
    var MIN = -0.5;
    var scaled = (x - MIN) / (MAX - MIN);
    if (scaled >= 1)
        return 1;
    if (scaled <= 0)
        return 0;
    return scaled;
};
export var dotProduct = function (vectorA, vectorB) {
    return vectorA.reduce(function (acc, cur, idx) { return acc + cur * vectorB[idx]; }, 0);
};
export var cosineSimilarity = function (vectorA, vectorB) {
    var cosineSim = dotProduct(vectorA, vectorB) /
        (euclideanLength(vectorA) * euclideanLength(vectorB));
    return cosineScaler(cosineSim);
};
export var sigmoid = function (z) {
    return 1 / (1 + Math.exp(-z));
};
//# sourceMappingURL=math.js.map