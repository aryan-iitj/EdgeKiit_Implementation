import { dotProduct, cosineSimilarity, sigmoid } from './math';
import { isNumberArray, isCosineSimilarityFilterType, isLogisticRegressionFilterType, } from './guards';
export var versionMatches = function (query, pageFeatures) { return pageFeatures.version === query.featureVersion; };
var isCosineSimilarityGreatherThanThreshold = function (queryValue, pageFeatures) {
    return pageFeatures.length === queryValue.vector.length
        ? cosineSimilarity(pageFeatures, queryValue.vector) > queryValue.threshold
        : false;
};
var isLogisticRegressionGreatherThanThreshold = function (queryValue, pageFeatures) {
    return pageFeatures.length === queryValue.vector.length
        ? sigmoid(dotProduct(queryValue.vector, pageFeatures) + queryValue.bias) >
            queryValue.threshold
        : false;
};
export var cosineSimilarityCondition = function (query, pageFeatures) {
    return isCosineSimilarityFilterType(query) &&
        isNumberArray(pageFeatures.value) &&
        isCosineSimilarityGreatherThanThreshold(query.queryValue, pageFeatures.value);
};
export var logisticRegressionCondition = function (query, pageFeatures) {
    return isLogisticRegressionFilterType(query) &&
        isNumberArray(pageFeatures.value) &&
        isLogisticRegressionGreatherThanThreshold(query.queryValue, pageFeatures.value);
};
//# sourceMappingURL=conditions.js.map