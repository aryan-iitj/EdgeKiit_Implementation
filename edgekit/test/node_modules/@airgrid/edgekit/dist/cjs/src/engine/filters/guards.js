"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isLogisticRegressionFilterType = exports.isCosineSimilarityFilterType = exports.isLogRegQueryValue = exports.isCosineSimilarityQueryValue = exports.isNumberArray = void 0;
var types_1 = require("../../../types");
/* Type Guards */
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
exports.isNumberArray = function (value) {
    return value instanceof Array && value.every(function (item) { return typeof item === 'number'; });
};
exports.isCosineSimilarityQueryValue = function (
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
value) {
    return exports.isNumberArray(value.vector) && typeof value.threshold === 'number';
};
exports.isLogRegQueryValue = function (
// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types, @typescript-eslint/no-explicit-any
value) {
    return exports.isNumberArray(value.vector) &&
        typeof value.threshold === 'number' &&
        typeof value.bias === 'number';
};
exports.isCosineSimilarityFilterType = function (query) {
    return (query.queryFilterComparisonType ===
        types_1.QueryFilterComparisonType.COSINE_SIMILARITY &&
        exports.isCosineSimilarityQueryValue(query.queryValue));
};
exports.isLogisticRegressionFilterType = function (query) {
    return (query.queryFilterComparisonType ===
        types_1.QueryFilterComparisonType.LOGISTIC_REGRESSION &&
        exports.isLogRegQueryValue(query.queryValue));
};
//# sourceMappingURL=guards.js.map